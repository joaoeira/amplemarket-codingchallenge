{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main/Main';\nvar URL = \"http://localhost:5000\";\n\nfunction main() {\n  return _main.apply(this, arguments);\n}\n\nfunction _main() {\n  _main = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var sdk, eventListenerAdded;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return InboxSDK.load(2, \"sdk_gmailSnippet_74536b3008\");\n\n          case 2:\n            sdk = _context.sent;\n            eventListenerAdded = false;\n            sdk.Compose.registerComposeViewHandler(function (composeView) {\n              // a compose view has come into existence, do something with it!\n              composeView.addButton({\n                title: \"My Nifty Button!\",\n                iconUrl: 'https://example.com/foo.png',\n                onClick: function onClick(event) {\n                  if (!eventListenerAdded) {\n                    window.addEventListener(\"message\", function (e) {\n                      if (e.origin === URL) {\n                        if (e.data.action === \"postSnippetToBody\") {\n                          event.composeView.setBodyText(e.data.snippet);\n                        }\n\n                        if (e.data.action === \"saveSnippetFromBody\") {\n                          var composeViewBody = event.composeView.getHTMLContent();\n                          console.log(JSON.stringify({\n                            snippet: composeViewBody\n                          }));\n                          fetch(URL, {\n                            method: 'POST',\n                            mode: 'no-cors',\n                            cache: 'no-cache',\n                            credentials: 'same-origin',\n                            headers: {\n                              'Content-Type': 'application/json'\n                            },\n                            redirect: 'follow',\n                            referrerPolicy: 'no-referrer',\n                            body: JSON.stringify({\n                              snippet: composeViewBody\n                            })\n                          }).then(function (res) {\n                            return console.log(res.ok());\n                          }, function (err) {\n                            return console.log(err);\n                          });\n                        }\n                      }\n                    });\n                  }\n\n                  eventListenerAdded = true;\n                  ReactDOM.render( /*#__PURE__*/React.createElement(Main, null), document.body.appendChild(document.createElement('div')));\n                }\n              });\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _main.apply(this, arguments);\n}\n\nmain().then(function (res) {\n  return console.log(res);\n}, function (err) {\n  return console.log(err);\n});","map":{"version":3,"sources":["/home/joaoeira/Documents/amplemarket-gmailExtension/extension/src/js/snippetPlugin.js"],"names":["React","ReactDOM","Main","URL","main","InboxSDK","load","sdk","eventListenerAdded","Compose","registerComposeViewHandler","composeView","addButton","title","iconUrl","onClick","event","window","addEventListener","e","origin","data","action","setBodyText","snippet","composeViewBody","getHTMLContent","console","log","JSON","stringify","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","then","res","ok","err","render","document","appendChild","createElement"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,GAAG,GAAG,uBAAZ;;SAEeC,I;;;;;mEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACsBC,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAgB,6BAAhB,CADtB;;AAAA;AACUC,YAAAA,GADV;AAEQC,YAAAA,kBAFR,GAE6B,KAF7B;AAGID,YAAAA,GAAG,CAACE,OAAJ,CAAYC,0BAAZ,CAAuC,UAASC,WAAT,EAAqB;AACxD;AACAA,cAAAA,WAAW,CAACC,SAAZ,CAAsB;AACpBC,gBAAAA,KAAK,EAAE,kBADa;AAEpBC,gBAAAA,OAAO,EAAE,6BAFW;AAGpBC,gBAAAA,OAAO,EAAE,iBAASC,KAAT,EAAgB;AACvB,sBAAG,CAACR,kBAAJ,EAAuB;AACrBS,oBAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAAAC,CAAC,EAAI;AACtC,0BAAGA,CAAC,CAACC,MAAF,KAAajB,GAAhB,EAAoB;AAClB,4BAAGgB,CAAC,CAACE,IAAF,CAAOC,MAAP,KAAkB,mBAArB,EAAyC;AACvCN,0BAAAA,KAAK,CAACL,WAAN,CAAkBY,WAAlB,CAA8BJ,CAAC,CAACE,IAAF,CAAOG,OAArC;AACD;;AACD,4BAAGL,CAAC,CAACE,IAAF,CAAOC,MAAP,KAAkB,qBAArB,EAA2C;AACzC,8BAAMG,eAAe,GAAGT,KAAK,CAACL,WAAN,CAAkBe,cAAlB,EAAxB;AACAC,0BAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAe;AAACN,4BAAAA,OAAO,EAAEC;AAAV,2BAAf,CAAZ;AACAM,0BAAAA,KAAK,CAAC5B,GAAD,EAAM;AACT6B,4BAAAA,MAAM,EAAE,MADC;AAETC,4BAAAA,IAAI,EAAE,SAFG;AAGTC,4BAAAA,KAAK,EAAE,UAHE;AAITC,4BAAAA,WAAW,EAAE,aAJJ;AAKTC,4BAAAA,OAAO,EAAE;AACP,8CAAgB;AADT,6BALA;AAQTC,4BAAAA,QAAQ,EAAE,QARD;AASTC,4BAAAA,cAAc,EAAE,aATP;AAUTC,4BAAAA,IAAI,EAAEV,IAAI,CAACC,SAAL,CAAe;AAACN,8BAAAA,OAAO,EAAEC;AAAV,6BAAf;AAVG,2BAAN,CAAL,CAWGe,IAXH,CAWQ,UAAAC,GAAG;AAAA,mCAAId,OAAO,CAACC,GAAR,CAAYa,GAAG,CAACC,EAAJ,EAAZ,CAAJ;AAAA,2BAXX,EAWsC,UAAAC,GAAG;AAAA,mCAAGhB,OAAO,CAACC,GAAR,CAAYe,GAAZ,CAAH;AAAA,2BAXzC;AAYD;AAEF;AAAC,qBAtBJ;AAuBD;;AACDnC,kBAAAA,kBAAkB,GAAE,IAApB;AACAP,kBAAAA,QAAQ,CAAC2C,MAAT,eAAgB,oBAAC,IAAD,OAAhB,EAAwBC,QAAQ,CAACN,IAAT,CAAcO,WAAd,CAA0BD,QAAQ,CAACE,aAAT,CAAuB,KAAvB,CAA1B,CAAxB;AACD;AA/BmB,eAAtB;AAmCD,aArCH;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA2CA3C,IAAI,GAAGoC,IAAP,CAAY,UAAAC,GAAG;AAAA,SAAId,OAAO,CAACC,GAAR,CAAYa,GAAZ,CAAJ;AAAA,CAAf,EAAqC,UAAAE,GAAG;AAAA,SAAIhB,OAAO,CAACC,GAAR,CAAYe,GAAZ,CAAJ;AAAA,CAAxC","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Main from './Main/Main'\n\nconst URL = \"http://localhost:5000\"\n\nasync function main(){\n    const sdk = await InboxSDK.load(2,\"sdk_gmailSnippet_74536b3008\")\n    let eventListenerAdded = false;\n    sdk.Compose.registerComposeViewHandler(function(composeView){\n        // a compose view has come into existence, do something with it!\n        composeView.addButton({\n          title: \"My Nifty Button!\",\n          iconUrl: 'https://example.com/foo.png',\n          onClick: function(event) {\n            if(!eventListenerAdded){\n              window.addEventListener(\"message\", e => {\n                if(e.origin === URL){\n                  if(e.data.action === \"postSnippetToBody\"){\n                    event.composeView.setBodyText(e.data.snippet)\n                  }\n                  if(e.data.action === \"saveSnippetFromBody\"){\n                    const composeViewBody = event.composeView.getHTMLContent()\n                    console.log(JSON.stringify({snippet: composeViewBody}))\n                    fetch(URL, {\n                      method: 'POST',\n                      mode: 'no-cors', \n                      cache: 'no-cache',\n                      credentials: 'same-origin',\n                      headers: {\n                        'Content-Type': 'application/json'\n                      },\n                      redirect: 'follow', \n                      referrerPolicy: 'no-referrer',\n                      body: JSON.stringify({snippet: composeViewBody})\n                    }).then(res => console.log(res.ok()), err=> console.log(err));\n                  }\n\n                }})\n            }\n            eventListenerAdded =true;\n            ReactDOM.render(<Main/>,document.body.appendChild(document.createElement('div')))\n          },\n        });\n\n        \n      })\n      ;\n}\nmain().then(res => console.log(res), err => console.log(err))\n\n\n\n"]},"metadata":{},"sourceType":"module"}