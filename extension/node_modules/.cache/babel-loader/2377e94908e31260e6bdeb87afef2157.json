{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main/Main';\nimport { v4 as uuidv4 } from 'uuid';\nvar URL = \"http://localhost:5000\";\nvar wrapper = document.createElement('div');\nwrapper.id = 'extension-wrapper';\ndocument.body.appendChild(wrapper);\n\nfunction main() {\n  return _main.apply(this, arguments);\n}\n\nfunction _main() {\n  _main = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var sdk, eventListenerAdded, frameMounted;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return InboxSDK.load(2, \"sdk_gmailSnippet_74536b3008\");\n\n          case 2:\n            sdk = _context.sent;\n            eventListenerAdded = false;\n            frameMounted = false;\n            sdk.Compose.registerComposeViewHandler(function (composeView) {\n              if (sdk.User.getEmailAddress().includes(\"@gmail.com\")) {\n                composeView.addButton({\n                  title: \"My Nifty Button!\",\n                  iconUrl: 'https://example.com/foo.png',\n                  onClick: function onClick(event) {\n                    if (!eventListenerAdded) {\n                      window.addEventListener(\"message\", function (e) {\n                        if (e.origin === URL) {\n                          if (e.data.action === \"postSnippetToBody\") {\n                            event.composeView.setBodyText(e.data.snippet);\n                          }\n\n                          if (e.data.action === \"saveSnippetFromBody\") {\n                            var snippetBody = event.composeView.getTextContent();\n                            var name = prompt(\"Please enter a name for your snippet\");\n                            fetch(URL + \"/api/addSnippet\", {\n                              method: 'POST',\n                              mode: \"cors\",\n                              headers: {\n                                'Content-Type': 'application/json'\n                              },\n                              body: JSON.stringify({\n                                user: sdk.User.getEmailAddress(),\n                                snippet: snippetBody,\n                                name: name,\n                                id: uuidv4(snippetBody)\n                              })\n                            }).then(function (res) {\n                              if (res.ok) {\n                                document.getElementById(\"amplemarketExtension\").contentWindow.postMessage({\n                                  'action': \"fetchContents\"\n                                }, \"*\");\n                              }\n                            })[\"catch\"](function (err) {\n                              return console.log(err);\n                            });\n                          }\n                        }\n                      });\n                    }\n\n                    eventListenerAdded = true;\n                    if (!frameMounted) ReactDOM.render( /*#__PURE__*/React.createElement(Main, null), document.getElementById('extension-wrapper'));\n                  }\n                });\n                composeView.on('destroy', function (event) {\n                  ReactDOM.render(null, document.getElementById('extension-wrapper'));\n                });\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _main.apply(this, arguments);\n}\n\nmain().then(function (res) {\n  return console.log(res);\n}, function (err) {\n  return console.log(err);\n});","map":{"version":3,"sources":["/home/joaoeira/Documents/amplemarket-gmailExtension/extension/src/js/snippetPlugin.js"],"names":["React","ReactDOM","Main","v4","uuidv4","URL","wrapper","document","createElement","id","body","appendChild","main","InboxSDK","load","sdk","eventListenerAdded","frameMounted","Compose","registerComposeViewHandler","composeView","User","getEmailAddress","includes","addButton","title","iconUrl","onClick","event","window","addEventListener","e","origin","data","action","setBodyText","snippet","snippetBody","getTextContent","name","prompt","fetch","method","mode","headers","JSON","stringify","user","then","res","ok","getElementById","contentWindow","postMessage","err","console","log","render","on"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Main from './Main/Main'\n\nimport { v4 as uuidv4 } from 'uuid';\n\nconst URL = \"http://localhost:5000\"\n\nconst wrapper = document.createElement('div')\n  wrapper.id = 'extension-wrapper'\n  document.body.appendChild(wrapper)\n\nasync function main(){\n    \n    const sdk = await InboxSDK.load(2,\"sdk_gmailSnippet_74536b3008\")\n    let eventListenerAdded = false;\n    let frameMounted = false;\n    sdk.Compose.registerComposeViewHandler(function(composeView){\n        if(sdk.User.getEmailAddress().includes(\"@gmail.com\")){\n          composeView.addButton({\n            title: \"My Nifty Button!\",\n            iconUrl: 'https://example.com/foo.png',\n            onClick: function(event) {\n              if(!eventListenerAdded){\n                window.addEventListener(\"message\", e => {\n                  if(e.origin === URL){\n                    if(e.data.action === \"postSnippetToBody\"){\n                      event.composeView.setBodyText(e.data.snippet)\n                    }\n                    if(e.data.action === \"saveSnippetFromBody\"){\n                      const snippetBody = event.composeView.getTextContent();\n                      const name = prompt(\"Please enter a name for your snippet\")\n                      fetch(URL+\"/api/addSnippet\", {\n                        method: 'POST',\n                        mode: \"cors\",\n                        headers: {\n                          'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                          user: sdk.User.getEmailAddress(),\n                          snippet: snippetBody,\n                          name: name,\n                          id: uuidv4(snippetBody)\n                        })\n                      })\n                      .then(res => {\n                        if(res.ok){\n                          document.getElementById(\"amplemarketExtension\").contentWindow.postMessage({\n                            'action': \"fetchContents\",\n                          }, \"*\")\n                        }\n                      })\n                      .catch(err=> console.log(err));\n                    }\n  \n                  }})\n              }\n              eventListenerAdded=true;\n              if(!frameMounted) ReactDOM.render(<Main />,document.getElementById('extension-wrapper'))\n            },\n          });\n          composeView.on('destroy', function(event) {\n            ReactDOM.render(null,document.getElementById('extension-wrapper'))\n          });\n        }\n      })\n      ;\n}\nmain().then(res => console.log(res), err => console.log(err))\n\n\n\n"]},"metadata":{},"sourceType":"module"}